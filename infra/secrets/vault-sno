#!/bin/sh
# If not running under bash, re-execute under bash.
[ -z "$BASH_VERSION" ] && exec /usr/bin/env bash "$0" "$@"

set -euo pipefail
########################################################################
#
# Shell script to import secrets into Vault. You can login using:
#
# $ sh ./vault-sno
#
# Common params
TEAM_ENVIRONMENT=ocp
CLUSTER_NAME=sno
PROJECT_NAME=openshift-policy

export VAULT_ADDR=${VAULT_ADDR:-https://vault-vault.apps.sno.$BASE_DOMAIN}
export VAULT_SKIP_VERIFY=true
export VAULT_NAMESPACE="${TEAM_ENVIRONMENT}"
echo "Enter TOKEN for ${VAULT_ADDR}"
ROOT_TOKEN=${1:-}
if [ -z "${ROOT_TOKEN}" ]; then
    vault login
else
    vault login token=${ROOT_TOKEN}
fi
#
########################################################################

# convenience - can run individually for each secret
VAULT_UPDATE_ALL="TRUE"

prompt_update() {
  local app_name="$1"

  if [[ "${VAULT_UPDATE_ALL}" != "TRUE" ]]; then
    local answer="n"
    read -rP "Do you wish to update ${app_name}? [y/N] " answer
    if [[ "${answer}" == "n" ]];
    then
      echo "Skipping ${app_name}.."
      return 1
    fi
  fi

  return 0
}

# this directory
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# common api keys
TAVILY_SEARCH_API_KEY=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 # mike
#MODEL_LLAMA3_API_KEY=e3fdf5cc2d7034ba7d1dc164cbc224bc # hunter
MODEL_LLAMA3_API_KEY=fc0f9c69740c41035bec7d54624d9371
MODEL_LLAMA4_API_KEY=d2040bcba346ef383648b79a728e6041 # mike
MODEL_EMBED_API_KEY=95ce5e02e389270871883f59a0d361c6  # hunter
#GITHUB_TOKEN=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 # etx repo
GITHUB_TOKEN=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

# mcp-github
APP_NAME=mcp-github
if prompt_update ${APP_NAME}; then
  vault kv put kv/$TEAM_ENVIRONMENT/$CLUSTER_NAME/$PROJECT_NAME/$APP_NAME \
    GITHUB_TOKEN=${GITHUB_TOKEN}
fi

# llama-stack-playground
APP_NAME=llama-stack-playground
if prompt_update ${APP_NAME}; then
  vault kv put kv/$TEAM_ENVIRONMENT/$CLUSTER_NAME/$PROJECT_NAME/$APP_NAME \
    TAVILY_SEARCH_API_KEY=${TAVILY_SEARCH_API_KEY}
fi

# maas api keys
APP_NAME=models
if prompt_update ${APP_NAME}; then
  vault kv put kv/$TEAM_ENVIRONMENT/$CLUSTER_NAME/$PROJECT_NAME/$APP_NAME \
    MODEL_LLAMA3_API_KEY=${MODEL_LLAMA3_API_KEY} \
    MODEL_LLAMA4_API_KEY=${MODEL_LLAMA4_API_KEY} \
    MODEL_EMBED_API_KEY=${MODEL_EMBED_API_KEY}
fi

# llama-stack
APP_NAME=llama-stack
if prompt_update ${APP_NAME}; then
  vault kv put kv/$TEAM_ENVIRONMENT/$CLUSTER_NAME/$PROJECT_NAME/$APP_NAME \
    MODEL_LLAMA3_API_KEY=${MODEL_LLAMA3_API_KEY} \
    MODEL_LLAMA4_API_KEY=${MODEL_LLAMA4_API_KEY} \
    MODEL_EMBED_API_KEY=${MODEL_EMBED_API_KEY} \
    TAVILY_SEARCH_API_KEY=${TAVILY_SEARCH_API_KEY}
fi

# ai-agent
APP_NAME=ai-agent
if prompt_update ${APP_NAME}; then
  vault kv put kv/$TEAM_ENVIRONMENT/$CLUSTER_NAME/$PROJECT_NAME/$APP_NAME \
    MODEL_LLAMA3_API_KEY=${MODEL_LLAMA3_API_KEY} \
    MODEL_LLAMA4_API_KEY=${MODEL_LLAMA4_API_KEY} \
    MODEL_EMBED_API_KEY=${MODEL_EMBED_API_KEY} \
    TAVILY_SEARCH_API_KEY=${TAVILY_SEARCH_API_KEY}
fi
